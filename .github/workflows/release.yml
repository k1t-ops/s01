name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.0.0'

env:
  GO_VERSION: '1.21'
  CGO_ENABLED: 0
  GOOS: linux
  GOARCH: amd64

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create build directory
      run: mkdir -p build

    - name: Build server binary
      working-directory: server
      run: |
        echo "Building discovery server..."
        go mod tidy
        go build -a -installsuffix cgo -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" -o ../build/discovery-server .
        echo "Server binary built successfully"

    - name: Build client binary
      working-directory: client
      run: |
        echo "Building discovery client..."
        go mod tidy
        go build -a -installsuffix cgo -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" -o ../build/discovery-client .
        echo "Client binary built successfully"

    - name: Verify binaries
      run: |
        echo "Verifying built binaries..."
        ls -la build/
        file build/discovery-server
        file build/discovery-client
        echo "Binary verification completed"

    - name: Package server binary
      run: |
        echo "Packaging server binary..."
        cd build
        tar -czf discovery-server-linux-amd64.tar.gz discovery-server
        echo "Server package created"

    - name: Package client binary
      run: |
        echo "Packaging client binary..."
        cd build
        tar -czf discovery-client-linux-amd64.tar.gz discovery-client
        echo "Client package created"

    - name: Generate checksums
      run: |
        echo "Generating checksums..."
        cd build
        sha256sum *.tar.gz > checksums.txt
        echo "Checksums generated:"
        cat checksums.txt

    - name: Create release notes
      id: release_notes
      run: |
        echo "Creating release notes..."
        cat > release_notes.md << EOF
        # Host Discovery Service ${{ steps.version.outputs.version }}

        ## What's Included

        This release contains precompiled Linux x86_64 binaries for:
        - **discovery-server-linux-amd64.tar.gz** - Discovery server binary
        - **discovery-client-linux-amd64.tar.gz** - Discovery client binary
        - **checksums.txt** - SHA256 checksums for verification

        ## Quick Deployment

        ### Using the deployment script:
        \`\`\`bash
        # Deploy server only
        sudo ./scripts/deploy.sh server --repo ${{ github.repository }} --version ${{ steps.version.outputs.version }}

        # Deploy both server and client
        sudo ./scripts/deploy.sh full --repo ${{ github.repository }} --version ${{ steps.version.outputs.version }}

        # Production deployment
        sudo ./scripts/deploy.sh production --repo ${{ github.repository }} --version ${{ steps.version.outputs.version }}
        \`\`\`

        ### Manual installation:
        \`\`\`bash
        # Download and extract server
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/discovery-server-linux-amd64.tar.gz | tar xz

        # Download and extract client
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/discovery-client-linux-amd64.tar.gz | tar xz

        # Make executable and run
        chmod +x discovery-server discovery-client
        ./discovery-server --help
        ./discovery-client --help
        \`\`\`

        ## System Requirements

        - Linux x86_64 (Ubuntu 18.04+, CentOS 7+, or equivalent)
        - OpenSSL/TLS certificates for HTTPS communication
        - systemd (optional, for service management)

        ## Configuration

        See [BINARY-DEPLOYMENT.md](https://github.com/${{ github.repository }}/blob/main/BINARY-DEPLOYMENT.md) for detailed deployment and configuration instructions.

        ## Verification

        Verify downloaded files using the provided checksums:
        \`\`\`bash
        sha256sum -c checksums.txt
        \`\`\`

        ## Binary Information

        - **Go Version**: ${{ env.GO_VERSION }}
        - **Build Date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        - **Git Commit**: ${{ github.sha }}
        - **Architecture**: linux/amd64
        - **CGO**: Disabled (static linking)

        EOF

        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Discovery Service ${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

    - name: Upload Server Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/discovery-server-linux-amd64.tar.gz
        asset_name: discovery-server-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Client Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/discovery-client-linux-amd64.tar.gz
        asset_name: discovery-client-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | File Size |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Server | ✅ Built | $(ls -lh build/discovery-server-linux-amd64.tar.gz | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
        echo "| Client | ✅ Built | $(ls -lh build/discovery-client-linux-amd64.tar.gz | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Download URL**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Deploy Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Update repository in scripts first:" >> $GITHUB_STEP_SUMMARY
        echo "# sed -i 's/your-org\/discovery-service/${{ github.repository }}/g' scripts/deploy*.sh" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Then deploy:" >> $GITHUB_STEP_SUMMARY
        echo "sudo make deploy-production DEPLOY_ARGS=\"--version ${{ steps.version.outputs.version }}\"" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  test-deployment:
    name: Test Deployment Scripts
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Test deployment script syntax
      run: |
        echo "Testing deployment script syntax..."
        bash -n scripts/deploy-binary.sh
        bash -n scripts/deploy.sh
        echo "Syntax check passed"

    - name: Test dry run deployment
      run: |
        echo "Testing dry run deployment..."
        # Update repo in script for testing
        sed -i "s/your-org\/discovery-service/${{ github.repository }}/g" scripts/deploy-binary.sh scripts/deploy.sh

        # Test dry run (this will fail to download since release might not be public yet, but tests script logic)
        sudo scripts/deploy.sh full --version ${{ needs.build.steps.version.outputs.version }} --dry-run || echo "Dry run completed (expected to show what would be done)"

    - name: Validate release artifacts
      run: |
        echo "Validating that release was created..."
        # This is a simple validation that could be expanded
        echo "Release validation would check:"
        echo "- Release exists at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build.steps.version.outputs.version }}"
        echo "- Binaries are downloadable"
        echo "- Checksums match"
